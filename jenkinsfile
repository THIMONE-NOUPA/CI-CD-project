pipeline {
    agent any
    environment {
        SONARQUBE_SERVER = 'Sonar'
    }
    stages {
        stage('Cloning GitHub Repo') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                          userRemoteConfigs: [[credentialsId: 'githubid', 
                                               url: 'https://github.com/THIMONE-NOUPA/CI-CD-project.git']]])
            }
        }
        stage('Maven Package') {
            agent {
                docker {
                    image 'maven:3.8.4-openjdk-11'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn clean package'
            }
        }
        stage('SonarQube Analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:11.0'
                    args '-v /root/.sonar:/root/.sonar'
                }
            }
            environment {
                SONAR_TOKEN = credentials('sonarqube-auth-token')
            }
            steps {
                withSonarQubeEnv('Sonar') {
                    sh '''
                        export SONAR_SCANNER_OPTS="-Dsonar.cache.directory=/tmp/.sonar/cache"
                        sonar-scanner \
                        -Dsonar.projectKey=CI-CD-project \
                        -Dsonar.projectName=CI-CD-project \
                        -Dsonar.sources=src \
                        -Dsonar.host.url=https://sonarqube.devopseasylearning.uk/ \
                        -Dsonar.login=$SONAR_TOKEN
                        -X
                    '''
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline termin√©.'
        }
    }
}
